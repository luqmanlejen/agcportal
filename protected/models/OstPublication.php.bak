<?php

/**
 * This is the model class for table "ost_publication".
 *
 * The followings are the available columns in table 'ost_publication':
 * @property integer $id
 * @property string $doc_type
 * @property string $title
 * @property string $doc_url
 * @property string $doc_dt
 * @property string $publish_startdt
 * @property string $publish_enddt
 * @property string $doc_dvsn
 * @property integer $hits
 * @property integer $parent_id
 * @property string $lang
 * @property string $created_dt
 * @property string $created_by
 * @property string $updated_dt
 * @property string $updated_by
 * @property string $status
 * @property string $display_type
 * @property integer $view_latest
 */
class OstPublication extends CActiveRecord {

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'ost_publication';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('title, doc_url, doc_dt', 'required'),
            array('hits, parent_id', 'numerical', 'integerOnly' => true),
            array('doc_type, doc_dvsn, lang', 'length', 'max' => 10),
            array('title, doc_url, created_by, updated_by', 'length', 'max' => 255),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, doc_type, title, doc_url, doc_dt, publish_startdt, publish_enddt, doc_dvsn, hits, parent_id, lang, created_dt, created_by, updated_dt, updated_by', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'reladmin' => array(self::BELONGS_TO, 'OstUser', '', 'foreignKey' => array('updated_by' => 'id')), 'relmenu' => array(self::BELONGS_TO, 'OstMenuPortal', '', 'foreignKey' => array('menu_id' => 'id')),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'doc_type' => 'Document Type',
            'title' => 'Title',
            'doc_url' => 'Document',
            'doc_dt' => 'Document Date',
            'publish_startdt' => 'Publish Startdt',
            'publish_enddt' => 'Publish Enddt',
            'doc_dvsn' => 'Division',
            'hits' => 'Hits',
            'parent_id' => 'Parent',
            'lang' => 'Language',
            'created_dt' => 'Created Dt',
            'created_by' => 'Created By',
            'updated_dt' => 'Updated Date',
            'updated_by' => 'Updated By',
            'status' => 'Status',
            'display_type' => 'Display Type',
            'view_latest' => 'View Latest',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

//		$criteria->compare('id',$this->id);
//		$criteria->compare('doc_type',$this->doc_type,true);
        $criteria->compare('title', $this->title, true);
//		$criteria->compare('doc_url',$this->doc_url,true);
//		$criteria->compare('doc_dt',$this->doc_dt,true);
//		$criteria->compare('publish_startdt',$this->publish_startdt,true);
//		$criteria->compare('publish_enddt',$this->publish_enddt,true);
//		$criteria->compare('doc_dvsn',$this->doc_dvsn,true);
//		$criteria->compare('hits',$this->hits);
//		$criteria->compare('parent_id',$this->parent_id);
//		$criteria->compare('lang',$this->lang,true);
//		$criteria->compare('created_dt',$this->created_dt,true);
//		$criteria->compare('created_by',$this->created_by,true);
//		$criteria->compare('updated_dt',$this->updated_dt,true);
//		$criteria->compare('updated_by',$this->updated_by,true);

        if (isset($_GET['doc_type'])) {
            $criteria->addCondition('t.doc_type = "' . $_GET['doc_type'] . '"');
        }
        $criteria->addCondition("t.lang = 'en'");

        if (!isset($_GET['OstRefList_sort']))
            $criteria->order = 't.updated_dt DESC';

        return new CActiveDataProvider($this, array('criteria' => $criteria, 'pagination' => array('pageSize' => 10)));
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return OstPublication the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function beforeSave() {
        $this->updated_by = Yii::app()->session['user_id'];
        $this->updated_dt = new CDbExpression('NOW()');
        if ($this->isNewRecord) {
            $this->created_by = Yii::app()->session['user_id'];
            $this->created_dt = new CDbExpression('NOW()');
        }
        return parent::beforeSave();
    }

    public function displaylang() {
        $output = '<img src="images/lang/en.png">&nbsp;';
        $model = OstPublication::model()->findAllByAttributes(array('parent_id' => $this->id));
        if (sizeof($model) > 0) {
            foreach ($model as $row) {
                if ($row['title'] == '')
                    $output .= '<img src="images/lang/my.png" style="opacity:0.2;">&nbsp;';
                else
                    $output .= '<img src="images/lang/my.png">&nbsp;';
            }
        }
        echo $output;
    }

    public function listRef3($cat_id) {
        //$models = OstRef::model()->findAll("cat='$cat' ORDER BY id ASC");
        $models = OstRefList::model()->findAll("cat_id='$cat_id' ORDER BY sort ASC");
        return CHtml::listData($models, 'code', 'label');
    }

    public function getdvsnlist() {
        $model = OstRefList::model()->findAll("cat_id='3'");
        return CHtml::listData($model, 'code', 'label');
    }

}
